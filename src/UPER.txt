[3,2,   4,7, 9,6]
[0,1,   2,3, 4,5]

bubble:
 
set has swapped to true
while has swapprd

for loops set
 
in second compare arr[i] to arr[j] 

if j < i set temp to arr[i]

 swap arr[i] = arr[j]
 j = temp 

 else swapped = false

 bugs after implemented

 starts switches and then keeps looping i as the lowest
fix: 
set breaks in nested loop if swapped and an else statement with a break 
fix2 in the i set swapped to false and do a while swapped on the inner loop
    then after swap set swapped to true and after the else
    this variable name makes no sense so i renamed it comparison_done

Ended up working as a selection sort

selection sort:

temp needed for swap

set a smallest var (intialized to curr ) and on each loop reset if smaller than smallest
nest another for loop
loop through and see if a[j] < a[sm]
    if so sm = a[j]

exit loop and swap and continue looping and swapping until no swaps required

Merge sort

1. While your data set contains more than one item, split it in half
2. Once you have gotten down to a single element, you have also *sorted* that element 
   (a single element cannot be "out of order")
3. Start merging your single lists of one element together into larger, sorted sets
4. Repeat step 3 until the entire data set has been reassembled
```

merge sort:
split array down to halfs until arrays of len  
DONE EASY WITH JACKSON pair programming STYLE


merge:
merge and sort lists 

tagging length of arra and arrb with 0's in merged array
somehow push values from passed in array into merged array and pop 0

if len(arrA) = 1 and len arrB == 1 merge the 2
compare arra[i] to arra[i+1]


